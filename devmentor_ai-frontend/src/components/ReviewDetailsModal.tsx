'use client';

import { useState, useEffect } from 'react';
import { 
  X, 
  Calendar, 
  Code, 
  TrendingUp, 
  Shield, 
  Wrench, 
  AlertTriangle,
  Lightbulb,
  Star,
  Download,
  Share2,
  ExternalLink
} from 'lucide-react';
import CodeViewer from './CodeViewer';

interface ReviewDetails {
  id: string;
  title: string;
  description: string;
  code: string;
  language: string;
  status: string;
  overallScore: number;
  complexity: string;
  maintainability: number;
  performance: number;
  security: number;
  fullReview: string;
  createdAt: string;
  updatedAt: string;
  issues: Array<{
    id: string;
    type: string;
    severity: 'low' | 'medium' | 'high' | 'critical';
    line: number;
    message: string;
    suggestion?: string;
  }>;
  suggestions: Array<{
    id: string;
    type: string;
    message: string;
    codeExample?: string;
  }>;
}

interface ReviewDetailsModalProps {
  reviewId: string;
  isOpen: boolean;
  onClose: () => void;
}

export default function ReviewDetailsModal({ reviewId, isOpen, onClose }: ReviewDetailsModalProps) {
  const [review, setReview] = useState<ReviewDetails | null>(null);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState<'overview' | 'code' | 'analysis' | 'suggestions'>('overview');

  useEffect(() => {
    if (isOpen && reviewId) {
      fetchReviewDetails();
    }
  }, [isOpen, reviewId]);

  const fetchReviewDetails = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      
      const response = await fetch(`http://localhost:5000/api/reviews/${reviewId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setReview(result.review);
        }
      }
    } catch (error) {
      console.error('Error fetching review details:', error);
    } finally {
      setLoading(false);
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 8) return 'text-green-600';
    if (score >= 6) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBg = (score: number) => {
    if (score >= 8) return 'bg-green-100';
    if (score >= 6) return 'bg-yellow-100';
    return 'bg-red-100';
  };

  const getComplexityColor = (complexity: string) => {
    switch (complexity) {
      case 'low': return 'text-green-600 bg-green-100';
      case 'medium': return 'text-yellow-600 bg-yellow-100';
      case 'high': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const generateShareableLink = () => {
    const url = `${window.location.origin}/reviews/${reviewId}`;
    navigator.clipboard.writeText(url);
    alert('Shareable link copied to clipboard!');
  };

  const downloadReport = () => {
    if (!review) return;
    
    const report = `# Code Review Report

## ${review.title}

**Language:** ${review.language}
**Date:** ${formatDate(review.createdAt)}
**Overall Score:** ${review.overallScore}/10
**Complexity:** ${review.complexity}

### Metrics
- **Maintainability:** ${review.maintainability}/10
- **Performance:** ${review.performance}/10
- **Security:** ${review.security}/10

### Issues Found (${review.issues.length})
${review.issues.map(issue => `
- **${issue.type}** (Line ${issue.line}) - ${issue.severity}
  ${issue.message}
  ${issue.suggestion ? `Suggestion: ${issue.suggestion}` : ''}
`).join('\n')}

### Suggestions (${review.suggestions.length})
${review.suggestions.map(suggestion => `
- **${suggestion.type}:** ${suggestion.message}
  ${suggestion.codeExample ? `\`\`\`\n${suggestion.codeExample}\n\`\`\`` : ''}
`).join('\n')}

### Full Analysis
${review.fullReview}

---
Generated by DevMentor AI
`;

    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${review.title.replace(/[^a-zA-Z0-9]/g, '_')}_review.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-7xl w-full h-[90vh] flex flex-col">
        {/* Header */}
        <div className="p-6 border-b flex items-center justify-between">
          <div className="flex-1">
            {loading ? (
              <div className="animate-pulse">
                <div className="h-6 bg-gray-200 rounded w-1/3 mb-2"></div>
                <div className="h-4 bg-gray-200 rounded w-1/4"></div>
              </div>
            ) : review ? (
              <div>
                <h2 className="text-2xl font-bold text-gray-900 mb-1">{review.title}</h2>
                <div className="flex items-center gap-4 text-sm text-gray-500">
                  <div className="flex items-center gap-1">
                    <Calendar className="h-4 w-4" />
                    {formatDate(review.createdAt)}
                  </div>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium capitalize ${getComplexityColor(review.complexity)}`}>
                    {review.complexity} complexity
                  </span>
                  <div className={`px-3 py-1 rounded-full text-sm font-bold ${getScoreColor(review.overallScore)} ${getScoreBg(review.overallScore)}`}>
                    {review.overallScore}/10
                  </div>
                </div>
              </div>
            ) : null}
          </div>
          
          <div className="flex items-center gap-2">
            {review && (
              <>
                <button
                  onClick={downloadReport}
                  className="p-2 text-gray-500 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                  title="Download Report"
                >
                  <Download className="h-5 w-5" />
                </button>
                <button
                  onClick={generateShareableLink}
                  className="p-2 text-gray-500 hover:text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                  title="Share Review"
                >
                  <Share2 className="h-5 w-5" />
                </button>
              </>
            )}
            <button
              onClick={onClose}
              className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <X className="h-5 w-5" />
            </button>
          </div>
        </div>

        {/* Tabs */}
        <div className="px-6 border-b">
          <div className="flex gap-1">
            {[
              { id: 'overview', label: 'Overview', icon: Star },
              { id: 'code', label: 'Code Review', icon: Code },
              { id: 'analysis', label: 'AI Analysis', icon: TrendingUp },
              { id: 'suggestions', label: 'Suggestions', icon: Lightbulb }
            ].map(tab => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as any)}
                  className={`flex items-center gap-2 px-4 py-3 text-sm font-medium border-b-2 transition-colors ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  }`}
                >
                  <Icon className="h-4 w-4" />
                  {tab.label}
                  {tab.id === 'analysis' && review?.issues.length ? (
                    <span className="bg-red-100 text-red-800 text-xs px-2 py-0.5 rounded-full">
                      {review.issues.length}
                    </span>
                  ) : null}
                  {tab.id === 'suggestions' && review?.suggestions.length ? (
                    <span className="bg-blue-100 text-blue-800 text-xs px-2 py-0.5 rounded-full">
                      {review.suggestions.length}
                    </span>
                  ) : null}
                </button>
              );
            })}
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-full">
              <div className="text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                <p className="text-gray-600">Loading review details...</p>
              </div>
            </div>
          ) : !review ? (
            <div className="flex items-center justify-center h-full">
              <p className="text-gray-600">Failed to load review details</p>
            </div>
          ) : (
            <div className="h-full overflow-y-auto">
              {activeTab === 'overview' && (
                <div className="p-6">
                  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Metrics */}
                    <div className="lg:col-span-1">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Performance Metrics</h3>
                      <div className="space-y-4">
                        <div className="bg-gray-50 p-4 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <Wrench className="h-5 w-5 text-blue-600" />
                              <span className="font-medium">Maintainability</span>
                            </div>
                            <span className={`font-bold ${getScoreColor(review.maintainability)}`}>
                              {review.maintainability}/10
                            </span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className={`h-2 rounded-full ${review.maintainability >= 8 ? 'bg-green-500' : review.maintainability >= 6 ? 'bg-yellow-500' : 'bg-red-500'}`}
                              style={{ width: `${review.maintainability * 10}%` }}
                            ></div>
                          </div>
                        </div>

                        <div className="bg-gray-50 p-4 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <TrendingUp className="h-5 w-5 text-green-600" />
                              <span className="font-medium">Performance</span>
                            </div>
                            <span className={`font-bold ${getScoreColor(review.performance)}`}>
                              {review.performance}/10
                            </span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className={`h-2 rounded-full ${review.performance >= 8 ? 'bg-green-500' : review.performance >= 6 ? 'bg-yellow-500' : 'bg-red-500'}`}
                              style={{ width: `${review.performance * 10}%` }}
                            ></div>
                          </div>
                        </div>

                        <div className="bg-gray-50 p-4 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <Shield className="h-5 w-5 text-purple-600" />
                              <span className="font-medium">Security</span>
                            </div>
                            <span className={`font-bold ${getScoreColor(review.security)}`}>
                              {review.security}/10
                            </span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className={`h-2 rounded-full ${review.security >= 8 ? 'bg-green-500' : review.security >= 6 ? 'bg-yellow-500' : 'bg-red-500'}`}
                              style={{ width: `${review.security * 10}%` }}
                            ></div>
                          </div>
                        </div>
                      </div>

                      <div className="mt-6">
                        <h4 className="font-semibold text-gray-900 mb-3">Quick Stats</h4>
                        <div className="grid grid-cols-2 gap-4">
                          <div className="text-center p-3 bg-red-50 rounded-lg">
                            <div className="text-2xl font-bold text-red-600">{review.issues.length}</div>
                            <div className="text-sm text-red-800">Issues Found</div>
                          </div>
                          <div className="text-center p-3 bg-blue-50 rounded-lg">
                            <div className="text-2xl font-bold text-blue-600">{review.suggestions.length}</div>
                            <div className="text-sm text-blue-800">Suggestions</div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Description & Summary */}
                    <div className="lg:col-span-2">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Review Summary</h3>
                      
                      {review.description && (
                        <div className="mb-6">
                          <h4 className="font-medium text-gray-900 mb-2">Description</h4>
                          <p className="text-gray-700 bg-gray-50 p-4 rounded-lg">{review.description}</p>
                        </div>
                      )}

                      <div className="bg-white border border-gray-200 rounded-lg p-6">
                        <h4 className="font-medium text-gray-900 mb-3">AI Analysis Summary</h4>
                        <div className="prose prose-sm max-w-none">
                          <div className="whitespace-pre-line text-gray-700">
                            {review.fullReview.split('\n').slice(0, 10).join('\n')}
                            {review.fullReview.split('\n').length > 10 && (
                              <div className="mt-4">
                                <button
                                  onClick={() => setActiveTab('analysis')}
                                  className="inline-flex items-center text-blue-600 hover:text-blue-700 font-medium"
                                >
                                  Read full analysis <ExternalLink className="h-4 w-4 ml-1" />
                                </button>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {activeTab === 'code' && (
                <div className="p-6">
                  <CodeViewer
                    code={review.code}
                    language={review.language}
                    issues={review.issues}
                    readOnly={true}
                    height="600px"
                  />
                </div>
              )}

              {activeTab === 'analysis' && (
                <div className="p-6">
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Issues */}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">
                        Issues Found ({review.issues.length})
                      </h3>
                      
                      {review.issues.length === 0 ? (
                        <div className="bg-green-50 border border-green-200 rounded-lg p-6 text-center">
                          <AlertTriangle className="h-12 w-12 text-green-500 mx-auto mb-3" />
                          <h4 className="font-medium text-green-900 mb-1">No Issues Found!</h4>
                          <p className="text-green-700">Your code looks clean and follows best practices.</p>
                        </div>
                      ) : (
                        <div className="space-y-4">
                          {review.issues.map((issue, index) => (
                            <div key={index} className="border border-gray-200 rounded-lg p-4">
                              <div className="flex items-start gap-3 mb-3">
                                <div className={`p-2 rounded-full ${
                                  issue.severity === 'critical' ? 'bg-red-100' :
                                  issue.severity === 'high' ? 'bg-orange-100' :
                                  issue.severity === 'medium' ? 'bg-yellow-100' :
                                  'bg-blue-100'
                                }`}>
                                  <AlertTriangle className={`h-4 w-4 ${
                                    issue.severity === 'critical' ? 'text-red-600' :
                                    issue.severity === 'high' ? 'text-orange-600' :
                                    issue.severity === 'medium' ? 'text-yellow-600' :
                                    'text-blue-600'
                                  }`} />
                                </div>
                                <div className="flex-1">
                                  <div className="flex items-center gap-2 mb-1">
                                    <span className="font-medium text-gray-900 capitalize">{issue.type}</span>
                                    <span className={`text-xs px-2 py-1 rounded-full font-medium ${
                                      issue.severity === 'critical' ? 'bg-red-100 text-red-800' :
                                      issue.severity === 'high' ? 'bg-orange-100 text-orange-800' :
                                      issue.severity === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                                      'bg-blue-100 text-blue-800'
                                    }`}>
                                      {issue.severity}
                                    </span>
                                  </div>
                                  <p className="text-sm text-gray-600 mb-2">Line {issue.line}</p>
                                </div>
                              </div>
                              
                              <p className="text-gray-800 mb-3">{issue.message}</p>
                              
                              {issue.suggestion && (
                                <div className="bg-blue-50 border border-blue-200 rounded p-3">
                                  <div className="flex items-start gap-2">
                                    <Lightbulb className="h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0" />
                                    <div>
                                      <p className="text-sm font-medium text-blue-900 mb-1">Suggestion:</p>
                                      <p className="text-sm text-blue-800">{issue.suggestion}</p>
                                    </div>
                                  </div>
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      )}
                    </div>

                    {/* Full AI Analysis */}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Complete Analysis</h3>
                      <div className="bg-gray-50 border border-gray-200 rounded-lg p-6 h-96 overflow-y-auto">
                        <div className="prose prose-sm max-w-none">
                          <div className="whitespace-pre-line text-gray-700 font-mono text-sm leading-relaxed">
                            {review.fullReview}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {activeTab === 'suggestions' && (
                <div className="p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">
                    AI Suggestions ({review.suggestions.length})
                  </h3>
                  
                  {review.suggestions.length === 0 ? (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 text-center">
                      <Lightbulb className="h-12 w-12 text-blue-500 mx-auto mb-3" />
                      <h4 className="font-medium text-blue-900 mb-1">No Specific Suggestions</h4>
                      <p className="text-blue-700">Your code is well-structured. Keep up the good work!</p>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      {review.suggestions.map((suggestion, index) => (
                        <div key={index} className="border border-gray-200 rounded-lg p-6">
                          <div className="flex items-start gap-3 mb-3">
                            <div className="p-2 bg-blue-100 rounded-full">
                              <Lightbulb className="h-5 w-5 text-blue-600" />
                            </div>
                            <div>
                              <h4 className="font-medium text-gray-900 capitalize mb-1">{suggestion.type}</h4>
                              <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                                Enhancement
                              </span>
                            </div>
                          </div>
                          
                          <p className="text-gray-700 mb-4">{suggestion.message}</p>
                          
                          {suggestion.codeExample && (
                            <div className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto">
                              <div className="text-xs text-gray-400 mb-2">Example:</div>
                              <pre className="text-sm font-mono whitespace-pre-wrap">
                                <code>{suggestion.codeExample}</code>
                              </pre>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}